<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="object" xml:lang="en-us">
<title><xmlelement>object</xmlelement></title>
<shortdesc>The DITA <xmlelement>object</xmlelement> element corresponds to
    the HTML <xmlelement>object</xmlelement> element, and the attribute
    semantics derive from the HTML definitions. Because of this, the
      <xmlatt>type</xmlatt> attribute on <xmlelement>object</xmlelement>
    differs from the <xmlatt>type</xmlatt> attribute on many other DITA
    elements.</shortdesc>
<prolog><metadata>
<keywords><indexterm>objects<indexterm>overview</indexterm></indexterm>
                <indexterm>elements<indexterm>body<indexterm><xmlelement>object</xmlelement></indexterm></indexterm></indexterm>
                <indexterm>normative
                        statements<indexterm><xmlelement>object</xmlelement></indexterm></indexterm>
                <indexterm>rendering
                        expectations<indexterm><xmlelement>object</xmlelement></indexterm></indexterm>
</keywords>
</metadata></prolog>
<refbody>
        <section id="usage-information">
            <title>Usage information</title>
            <p>The <xmlelement>object</xmlelement> element enables authors
        to include animated images, applets, plug-ins, video clips, and
        other multimedia objects in a topic.</p>
        </section>
        <section id="rendering-expectations">
            <title>Rendering expectations</title>
            <p conkeyref="rendering-expectations/image-video"/>
            <p>When an object cannot be rendered in a meaningful way, processors <term
                    outputclass="RFC-2119">SHOULD</term> present the contents of the
                    <xmlelement>fallback</xmlelement> element, if it is present.</p>
        </section>
        <section conkeyref="content-models-object/object.element" id="content-model"/>
        <section id="attributes">
            <title>Attributes</title>
            <p>The following attributes are available on this element: <ph
        conkeyref="reuse-attributes/ref-universalatts"/> and the attributes defined below.</p>
            <dl>
                <dlentry id="data">
                    <dt id="attr-data"><xmlatt>data</xmlatt></dt>
                    <dd>Contains a reference to the location of an object&apos;s data. If this
                        attribute is a relative URL, it is specified relative to the document
                        containing the <xmlelement>object</xmlelement> element. If this attribute is
                        set, the <xmlatt>type</xmlatt> attribute should also be set.</dd>
                </dlentry>
                <dlentry id="datakeyref">
                    <!-- KJE: Modified to be parallel to the desciption of  @datakeyref in the audio and video topics-->
                    <dt id="attr-datakeyref"><xmlatt>datakeyref</xmlatt></dt>
                    <dd>Provides a key reference to the object. When specified and the key is
                        resolvable, the key-provided URI is used. A key that has no associated
                        resource, only link text, is considered to be unresolved. If
                            <xmlatt>data</xmlatt> is specified, it is used as a fallback when the
                        key cannot be resolved to a resource.</dd>
                </dlentry>
                <dlentry conkeyref="reuse-attributes/image-height" id="height">
                    <dt/>
                    <dd/>
                </dlentry>
                <dlentry id="name">
                    <dt id="attr-name"><xmlatt>name</xmlatt></dt>
                    <dd>Defines a unique name for the object.</dd>
                </dlentry>
                <dlentry id="tabindex">
                    <dt id="attr-tabindex"><xmlatt>tabindex</xmlatt></dt>
                    <dd>Specifies the position of the object in tabbing order.</dd>
                </dlentry>
                <dlentry id="type">
                    <dt id="attr-type"><xmlatt>type</xmlatt></dt>
                    <dd>Indicates the content type (MIME type) for the data specified by the
                            <xmlatt>data</xmlatt>
                        <ph>or <xmlatt>datakeyref</xmlatt>
                        </ph> attribute. This attribute should be set when the <xmlatt>data</xmlatt>
                        attribute is set to avoid loading unsupported content types. Note that this
                        differs from the <xmlatt>type</xmlatt> attribute on many other DITA elements
                        (it specifies a MIME type rather than a content type). <ph>If
                                <xmlatt>type</xmlatt> is not specified, the effective type value for
                            the key named by the <xmlatt>datakeyref</xmlatt> attribute is used as
                            the this attribute's value.</ph></dd>
                </dlentry>
                <dlentry id="usemap">
                    <dt id="attr-usemap"><xmlatt>usemap</xmlatt></dt>
                    <dd>Indicates that a client-side image map is to be used. An image map specifies
                        active geometric regions of an included object and assigns a link to each
                        region. When a link is selected, a document <ph>might</ph> be retrieved or a
                        program <ph>might</ph> run on the server.</dd>
                </dlentry>
                <dlentry conkeyref="reuse-attributes/image-width" id="width">
                    <dt/>
                    <dd/>
                </dlentry>
            </dl>
        </section>
<example id="example" otherprops="examples">
            <title>Example</title>
      <p>This section contains examples of how the
          <xmlelement>object</xmlelement> element can be used.</p>
      <fig rev="review-c">
        <title>Referencing a web page for display in an HTML inline frame
          (iframe)</title>
        <p>The following code sample shows how an
            <xmlelement>object</xmlelement> element can be used to render a
          web page in an inline frame. It assumes that the processing
          engine uses the <codeph>outputclass="iframe"</codeph>
          directive.</p>
        <codeblock><b>&lt;object type="text/html"</b>
        data="https://www.openstreetmap.org/export/embed.html?bbox=-0.004017949104309083%2C51.47612752641776
              %2C0.00030577182769775396
              %2C51.478569861898606
              &amp;layer=mapnik"
        width="800"
        height="600"
        id="map-uk-greenwich"
        outputclass="iframe">
   &lt;desc&gt;Greenwich, England&lt;/desc&gt;
   &lt;fallback>&lt;xref format="html" scope="external"
       href="https://www.openstreetmap.org/export/embed.html?bbox=-0.004017949104309083%2C51.47612752641776
              %2C0.00030577182769775396
              %2C51.478569861898606
              &amp;layer=mapnik"
    />&lt;/fallback><b>
&lt;/object&gt;</b></codeblock>
        <p>The above code might generate the following HTML:</p>
        <codeblock>&lt;!DOCTYPE html>
&lt;html>
  &lt;head>
    &lt;title>Test of Iframe&lt;/title>
  &lt;/head>
  &lt;body>
    &lt;p>Iframe:&lt;/p>
    &lt;iframe src="https://www.openstreetmap.org/export/embed.html?bbox=-0.004017949104309083%2C51.47612752641776
      %2C0.00030577182769775396
      %2C51.478569861898606
      &amp;layer=mapnik"       
      >Street map&lt;/iframe>
  &lt;/body>
&lt;/html></codeblock>
        <p/>
      </fig>
            <fig id="fig_o2l_bfb_4k">
                <title>Object with reference to video using key reference on the
                        <xmlelement>param</xmlelement> elements</title>
                <p>The following code sample shows how key definitions can
          be used to reference supporting resources for an
            <xmlelement>object</xmlelement>:</p>
                <codeblock><b>&lt;object id="E5123_026.mp4" width="300" height="300"></b>
  &lt;fallback>Media not available.&lt;/fallback>
  &lt;param name="poster" keyref="E5123_026_poster" />
  &lt;param name="source" keyref="E5123_026_video" /><b>
&lt;/object></b></codeblock>
                <p>In this scenario, the keys could be defined as
          follows:<codeblock>&lt;map>
  &lt;!-- ... -->
  &lt;keydef <b>keys="E5123</b>_026_poster"
      href="../images/E5123_026_poster.png"
      type="video/mp4"/>
  &lt;keydef <b>keys="E5123_026_video"</b>
      href="../media/E5123_026_poster.mp4"
      type="video/mp4"/>
  &lt;!-- ... -->
&lt;/map></codeblock></p>
            </fig>
            <fig>
                <title>Object with indirect reference to a flash file</title>
                <p>The following code sample shows how key definitions can
          be used to reference the main content for an
            <xmlelement>object</xmlelement>:</p>
                <codeblock>&lt;object id="cutkey370"
    <b>datakeyref="cutkey370"</b>
    height="280"
    width="370">
  &lt;desc>Video illustration of how to cut a key&lt;/desc>
  &lt;fallback>Media not available.&lt;/fallback>
  &lt;param name="movie" <b>keyref="cutkey370"</b>/>
  &lt;param name="quality" value="high"/>
  &lt;param name="bgcolor" value="#FFFFFF"/>
&lt;/object></codeblock>
                <p>In this scenario, the keys could be defined as
          follows:<codeblock>&lt;map>
  &lt;!-- ... -->

  &lt;!-- Using @scope="external" here because the referenced URL is external. -->
  &lt;keydef <b>keys="cutkey370"</b>
    href="https://www.example.com/cutkey370.swf"
    type="application/x-shockwave-flash"
    format="swf"
    scope="external" />

  &lt;!-- ... -->
&lt;/map></codeblock></p>
            </fig>
        </example>
</refbody>
</reference>
