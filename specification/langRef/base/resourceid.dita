<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN"
 "reference.dtd">
<reference id="resourceid" xml:lang="en-us">
<title><xmlelement>resourceid</xmlelement></title>
<shortdesc>A resource ID is an identifier that is designed for applications
    that need to use their own identifier scheme, such as context-sensitive
    help systems and databases.</shortdesc>
  <prolog>
    <metadata>
      <keywords>
        <indexterm>elements<indexterm>prolog<indexterm><xmlelement>resourceid</xmlelement></indexterm></indexterm></indexterm>
        <indexterm>prolog
          elements<indexterm><xmlelement>resourceid</xmlelement></indexterm></indexterm>
      </keywords>
    </metadata>
  </prolog>
<refbody>
    <section id="usage-information">
      <title>Usage information</title>
      <draft-comment author="rodaande" time="Jan 10, 2022">This topic needs to be sync'ed with
        content in the architectural spec. I think it would make sense for much of the appid-role
        content to be moved into a section of the "DITA Addressing" chapter, and that content really
        needs to be reviewed together with this topic after the sync.</draft-comment>
      <p>The <xmlatt>appid</xmlatt> and <xmlatt>appname</xmlatt> attributes
        work in combination to specify a specific ID for an application.
        Multiple <xmlatt>appid</xmlatt> values can be associated with a
        single <xmlatt>appname</xmlatt> value, and multiple
          <xmlatt>appname</xmlatt> values can be associated with a single
          <xmlatt>appid</xmlatt> value.Accordingly, each combination of
        values for the <xmlatt>appid</xmlatt> and <xmlatt>appname</xmlatt>
        attributes need to be unique within the context of the main
        map.</p>
      <p>When the <xmlatt>appid-role</xmlatt> attribute is set to
          <keyword>deliverable-anchor</keyword>, the value that it
        specifies contributes to deliverable anchors for a topic.
        According, certain limitations apply to the value of the
          <xmlatt>appid</xmlatt> attribute:</p>
      <ul>
        <li>It specifies only a single URI component.</li>
        <li>It is limited to values that can contribute to the following
          URI components:<ul>
            <li>The last path component of a URI path</li>
            <li>A fragment identifier</li>
            <li>A query parameter</li>
          </ul></li>
        <li>It should not specify components of URIs that are specific to a
          particular deliverable, such as a file extension.</li>
      </ul>
      <!--<p>When <xmlatt>appid-role</xmlatt> is set to <keyword>deliverable-anchor</keyword>, the <xmlatt>appid</xmlatt> attribute <i>contributes</i> to deliverable anchors for a topic, while <xmlatt>ux-context-string</xmlatt> specifies an exact context-sensitive help context identifier.</p>-->
      <!--<p>When <xmlatt>appid-role</xmlatt> is set to <keyword>deliverable-anchor</keyword>, the following limitations apply to the value of the <xmlatt>appid</xmlatt> attribute:</p>-->
      <p/>
    </section>
    <section id="processing-expectations">
      <title>Processing expectations</title>
      <p>By design, the <xmlelement>resourceid</xmlelement> element will not apply to all processors
        in all situations. Processors can examine the <xmlatt>appname</xmlatt> and
          <xmlatt>appid-role</xmlatt> attributes to determine whether a given
          <xmlelement>resourceid</xmlelement> element is relevant to a specific deliverable; if
          <xmlatt>appname</xmlatt> is not present, processors can assume that the element
        applies.</p>
      <p>When <xmlatt>appid-role</xmlatt> is set to <keyword>deliverable-anchor</keyword>, and the
          <xmlelement>resourceid</xmlelement> applies to a deliverable, processors <term
          outputclass="RFC-2119">SHOULD</term> use the <xmlatt>appid</xmlatt> value when
        constructing a URI for the delivered resource. Effective <xmlatt>appid</xmlatt> values for
        this reflect the application of any prefix or suffix values from <xref
          keyref="elements-dvrKeyscopePrefix"/> and <xref keyref="elements-dvrResourceSuffix"/>.
        Actual delivery anchors depend on the rendered format; for example, the anchor can be the
        base part of an HTML file name, a PDF anchor name, or a URI fragment identifier. While
        anchors values will vary by deliverable, the resulting URI should reflect the specified
        anchor as much as possible. </p>
      <p>When <xmlatt>appid-role</xmlatt> is set to <keyword>context-sensitive-help</keyword> or
        another value, processors can optionally use the <xmlatt>appid</xmlatt> value IDs to
        construct deliverable anchors. Deliverable components MAY have any number of anchors when
        the deliverable format allows.</p>
      <p>Processors can use other properties of the referenced resource, or properties of the
        reference itself, when constructing full deliverable anchors. For example, key scope names,
        key names, or source file names can all be used with the resource ID when constructing
        unique anchor values.</p>
    </section>
    <section conkeyref="content-models-resourceid/resourceid.element" id="content-model"/>
    <section id="attributes">
      <title>Attributes</title>
      <p>The following attributes are available on this element: <ph conkeyref="reuse-attributes/ref-universalatts"/> and the attributes defined below.</p>
      <dl>
        <dlentry id="appname">
          <dt id="attr-appname"><xmlatt>appname</xmlatt></dt>
          <dd><ph>Specifies a name for the external application.</ph>
          </dd>
        </dlentry>
        <dlentry id="appid">
          <dt id="attr-appid"><xmlatt>appid</xmlatt></dt>
          <dd>Specifies an ID that can be used by an application to
            identify the topic.<p>When <xmlatt>app-role</xmlatt> is set to
                <keyword>deliverable-anchor</keyword>, certain restrictions
              apply to the value of the <xmlatt>appid</xmlatt> attribute.
              See <xref keyref="elements-resourceid/usage-information"
              />.</p></dd>
        </dlentry>
        <dlentry>
          <dt id="attr-appid-role"><xmlatt>appid-role</xmlatt></dt>
          <dd>Specifies the role that the <xmlatt>appid</xmlatt> value
            plays for applications. The value is a single name token. The
            default value is <keyword>context-sensitive-help</keyword>.
            While applications can define their own values, the following
            values are defined by OASIS:<dl>
              <dlentry>
                <dt>context-sensitive-help</dt>
                <dd>Specifies that the value of the <xmlatt>appid</xmlatt>
                  attribute is used to connect the associated resource with
                  applications that use the associated resource as context
                  sensitive help.</dd>
              </dlentry>
              <dlentry>
                <dt>deliverable-anchor</dt>
                <dd>Specifies that the value of the <xmlatt>appid</xmlatt>
                  attribute is used to construct anchors for the associated
                    resource.<p>When <xmlatt>app-role</xmlatt> is set to
                      <keyword>deliverable-anchor</keyword>, certain
                    restrictions apply to the value of the
                      <xmlatt>appid</xmlatt> attribute. See <xref
                      keyref="elements-resourceid/usage-information"
                  />.</p></dd>
              </dlentry>
            </dl></dd>
        </dlentry>
        <dlentry>
          <dt id="attr-ux-context-string"><xmlatt>ux-context-string</xmlatt></dt>
          <dd>Specifies the value of a user-assistance context-string that is used to identify the
            topic.</dd>
        </dlentry>
        <dlentry>
          <dt id="attr-ux-source-priority"><xmlatt>ux-source-priority</xmlatt></dt>
          <dd>
            <p>Specifies precedence for handling
                <xmlelement>resourceid</xmlelement> definitions that exist
              in both a map and a topic. This attribute is only valid when
              used within a <xmlelement>topicref</xmlelement> element in a
              map. The following values are valid:</p>
            <dl>
              <dlentry>
                <dt>map-only</dt>
                <dd>Use IDs from the map only.</dd>
              </dlentry>
              <dlentry>
                <dt>map-takes-priority</dt>
                <dd>Use the IDs from the map, if they exist. Otherwise, use
                  IDs from the topic.</dd>
              </dlentry>
              <dlentry>
                <dt>topic-and-map</dt>
                <dd>Use IDs from both the topic and map.</dd>
              </dlentry>
              <dlentry>
                <dt>topic-only</dt>
                <dd>Use IDs from the topic only.</dd>
              </dlentry>
              <dlentry>
                <dt>topic-takes-priority</dt>
                <dd>Use the IDs from the topic, if they exist. Otherwise,
                  use IDs from the map.</dd>
              </dlentry>
              <dlentry conkeyref="reuse-attributes/ditauseconref">
                <dt/>
                <dd/>
              </dlentry>
            </dl>
          </dd>
        </dlentry>
        <dlentry>
          <dt id="attr-ux-windowref"><xmlatt>ux-windowref</xmlatt></dt>
          <dd>References the <xmlatt>name</xmlatt> attribute on the
              <xmlelement>ux-window</xmlelement> element that is used to display the topic when
            called from a help API.</dd>
        </dlentry>
      </dl>
    </section>
<example id="example" otherprops="examples">
      <title>Examples</title>
      <p>This section contains examples of how the
          <xmlelement>resourceid</xmlelement> element can be used.</p>
      <fig>
        <title>Example: Using a <xmlelement>resourceid</xmlelement> element
          in a map to generate hooks for  online help</title>
        <p>In the following code sample, user-assistance context hooks are
          applied to three topics that are referenced from a DITA map. The
          second topic has two hooks for the same topic.</p>
        <codeblock>&lt;map>
 &lt;title>Widget Help&lt;/title>
 &lt;topicref href="file_ops.dita">
   &lt;topicref href="saving.dita">
     &lt;topicmeta>
     <b>&lt;resourceid appname="ua" appid="1234" ux-context-string="idh_filesave"
     ux-source-priority="topic-only"/></b>
     &lt;/topicmeta>
   &lt;/topicref>
   &lt;topicref href="deleting.dita">
     &lt;topicmeta>
      <b>&lt;resourceid appname="ua" 
           appid="2345" ux-context-string="idh_filedelete" /&gt;</b>
      <b>&lt;resourceid appname="ua" 
           appid="6789" ux-context-string="idh_filekill" /&gt;</b>
     &lt;/topicmeta>
   &lt;/topicref>
   &lt;topicref href="editing.dita">
     &lt;topicmeta>
       <b>&lt;resourceid appname="ua" 
            appid="5432" ux-context-string="idh_fileedit" ux-windowref="csh"  /&gt;</b>
     &lt;/topicmeta>
   &lt;/topicref>
&lt;/topicref>
&lt;/map></codeblock>
      </fig>
      <fig>
        <title>Example: Using a <xmlelement>resourceid</xmlelement> element
          in a topic to generate hooks for  online help</title>
        <p>In the following code sample, a user-assistance context hook is
          defined in the prolog of a task topic. The context hook is made
          up of a context ID (value for <xmlatt>appid</xmlatt> attribute)
          and a context string (value for
            <xmlatt>ux-context-string</xmlatt> attribute). A
          user-assistance window profile is also referenced for this topic. </p>
        <codeblock>&lt;task id="fedt">
 &lt;title>Editing a File&lt;/title>
 &lt;prolog>
   <b>&lt;resourceid appname="ua" 
         appid="5432" ux-context-string="idh_fileedit" ux-windowref="csh" /></b>
 &lt;/prolog>
 &lt;taskbody>
  &lt;context>After you have created a new file, you can edit it.&lt;/context> 
  &lt;steps>
   &lt;step>&lt;cmd>Open...&lt;/cmd>&lt;/step>
   &lt;step>&lt;cmd>Edit...&lt;/cmd>&lt;/step>
   &lt;step>&lt;cmd>Save...&lt;/cmd>&lt;/step>
  &lt;/steps>
 &lt;/taskbody>
&lt;/task></codeblock>
      </fig>
      <fig>
        <title>Example: Using a <xmlelement>resourceid</xmlelement> element
          to XXX</title>
        <p>In the following code sample, anchor components are defined for
          two different references to the same topic. Each use of the topic
          represents the documentation for a different model of the same
          base device.</p>
        <codeblock>&lt;map>

  &lt;!-- ... -->
  &lt;keydef keys="topic-0014" href="replacing-widgetA.dita"/>
  &lt;!-- ... -->

  &lt;topicref keyscope="model-01">
    &lt;!-- ... -->
    &lt;topicref keys="replace-widgetA" keyref="topic-0014">
      &lt;topicmeta>
        &lt;resourceid appid="replace_widgetA_model_01" appid-role="deliverable-anchor"/>
      &lt;/topicmeta>
    &lt;/topicref>
    &lt;!-- ... -->  
  &lt;/topicref>
  &lt;topicref keyscope="model-02">
    &lt;!-- ... -->
    &lt;topicref keys="replace-widgetA" keyref="topic-0014">
      &lt;topicmeta>
        &lt;resourceid appid="replace_widgetA_model_02" appid-role="deliverable-anchor"/>
      &lt;/topicmeta>
    &lt;/topicref>
    &lt;!-- ... -->
  &lt;/topicref>
  &lt;!-- ... -->
&lt;/map></codeblock>
        <p>The <filepath>replacing-widgetA.dita</filepath> topic is
          published twice, once in each scope. When the map is published,
          the following occurs:</p>
        <ul>
          <li>An HTML deliverable might use the specified anchors to
            construct base file names for the resulting HTML. In this case,
            the copy in the first scope would use the name
              <filepath>replace_widgetA_model_01.html</filepath>, while the
            copy in the second scope uses the name
              <filepath>replace_widgetA_model_02</filepath>.</li>
          <li>A PDF deliverable might simply add the application IDs as
            anchors for each instance of the topic, so that
              <codeph>replace_widgetA_model_01</codeph> and
              <codeph>replace_widgetA_model_02</codeph> would be available
            as anchors within the PDF.</li>
        </ul>
      </fig>
    </example>
</refbody>
</reference>
