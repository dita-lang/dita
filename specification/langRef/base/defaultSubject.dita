<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="defaultSubject" xml:lang="en-us">
<title><xmlelement>defaultSubject</xmlelement></title>
<shortdesc>The <xmlelement>defaultSubject</xmlelement> element specifies the default value for the
    attribute in cases where no value is specified. The default value must be one of the controlled
    values that are bound to the attribute.</shortdesc>
<prolog><metadata>
<keywords>
        <indexterm>subject scheme<indexterm>elements<indexterm><xmlelement>defaultSubject</xmlelement></indexterm></indexterm></indexterm></keywords>
</metadata></prolog>
<refbody>
    <section id="processing-expectations">
      <title>Processing expectations</title>
      <draft-comment author="Kristen J Eberlein" time="03 December 2021">
        <p>Do we want to make a normative statement about how processors
          should handle default values for attributes when they are
          specified by <xmlelement>defaultSubject</xmlelement>?</p>
      </draft-comment>
      <draft-comment author="Kristen J Eberlein" time="13 December 2021">
        <p>Comments from review D:</p>
        <p><b>Frank Wegmann:</b> Let's assume, in the DTD or a
          specialization there is an attribute defined with an enumeration
          data type and some default value. Now a subject scheme imposes
          maybe different controlled values for that attribute with a
          different default value? How is an implementation supposed to
          validate a document instance? My naive understanding would be
          that the DTD/schema definitions have precedence. This would mean
          that if the subject scheme defines a set of controlled values
          none of which are in the attribute definition of the schema, then
          the default value of the DTD would be taken. But what is a tool
          like Oxygen supposed to be doing then? Maybe I ask this, because
          I have (apparently) no idea what's going on behind the scenes,
          but then I wonder if this is worth discussing in the spec? Not
          necessarily here, but earlier in the usage chapter.</p>
        <p><b>Robert Anderson: </b>I think we should add this as a draft
          comment in this page, and then make sure it is covered in the
          section about how to determine values:
          https://github.com/oasis-tcs/dita/blob/DITA-2.0/specification/archSpec/base/determining-effective-attribute-values.dita</p>
        <p>I think the answer is implied by the language today, but it's
          not directly addressed. The spec says that if your scheme tells
          you "a" and "b" are the only valid values in an attribute, then
          specifying "x" and "y" are both in error, and processors /
          applications can treat that as an error. If you set up that
          scheme but your grammar files only allow "x" and "y", then you've
          set up a scheme that means every usage of that element is
          automatically an error condition.</p>
      </draft-comment>
    </section>
    <section id="specialization-hierachy">
      <title>Specialization hierarchy</title>
      <p>The <xmlelement>defaultSubject</xmlelement> element is specialized from
          <xmlelement>topicref</xmlelement>. It is defined in the subject scheme module.</p>
    </section>
    <section conkeyref="content-models-defaultSubject/defaultSubject.element" id="content-model"/>
    <section id="attributes">
      <title>Attributes</title>
      <p>The following attributes are available on this element: <ph
          conkeyref="reuse-attributes/ref-linkatts"/>, <ph
          conkeyref="reuse-attributes/ref-universalatts"/>, <xref
          keyref="attributes-common/attr-impose-role"><xmlatt>impose-role</xmlatt></xref>, <xref
          keyref="attributes-common/attr-keyref"><xmlatt>keyref</xmlatt></xref>, <xref
          keyref="attributes-common/attr-keys"><xmlatt>keys</xmlatt></xref>, <xref
          keyref="attributes-common/attr-processing-role"><xmlatt>processing-role</xmlatt></xref>,
        and <xref keyref="attributes-common/attr-toc"><xmlatt>toc</xmlatt></xref>.</p>
      <p id="attr-exception" outputclass="attr-exception">For this element, the
          <xmlatt>impose-role</xmlatt> attribute has a fixed value of
        <keyword>keeptarget</keyword>.</p>
    </section>
    <example id="example" otherprops="examples">
      <title>Example</title>
      <p>The following code sample limits the values for
          <xmlatt>platform</xmlatt> to the <keyword>os</keyword> subject
        and sets the default value to <keyword>linux</keyword>:</p>
      <codeblock>&lt;subjectScheme>
  &lt;subjectdef keys="os">
    &lt;subjectdef keys="linux"/>
    &lt;subjectdef keys="mswin"/>
    &lt;subjectdef keys="zos"/>
    &lt;subjectdef keys="macos"/>
  &lt;/subjectdef>
  &lt;enumerationdef>
    &lt;attributedef name="platform"/>
    &lt;subjectdef keyref="os"/>
    <b>&lt;defaultSubject keyref="linux"/></b>
  &lt;/enumerationdef>
&lt;/subjectScheme></codeblock>
      <p>The result is that only the following values are permitted for
          <xmlatt>platform</xmlatt>:</p>
      <ul>
        <li><codeph>linux</codeph></li>
        <li><codeph>macos</codeph></li>
        <li><codeph>mswin</codeph></li>
        <li><codeph>zos</codeph></li>
      </ul>
      <p>If no value is specified for the <xmlatt>platform</xmlatt>
        attribute in the DITA source, the value is assumed to be
          <keyword>linux</keyword>.</p>
    </example>
  </refbody>
</reference>

